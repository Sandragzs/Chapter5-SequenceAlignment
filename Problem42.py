PAM250 = {
    'A': {'A': 2, 'C': -2, 'D': 0, 'E': 0, 'F': -3, 'G': 1, 'H': -1, 'I': -1, 'K': -1, 'L': -2, 'M': -1, 'N': 0, 'P': 1, 'Q': 0, 'R': -2, 'S': 1, 'T': 1, 'V': 0, 'W': -6, 'Y': -3},
    'C': {'A': -2, 'C': 12, 'D': -5, 'E': -5, 'F': -4, 'G': -3, 'H': -3, 'I': -2, 'K': -5, 'L': -6, 'M': -5, 'N': -4, 'P': -3, 'Q': -5, 'R': -4, 'S': 0, 'T': -2, 'V': -2, 'W': -8, 'Y': 0},
    'D': {'A': 0, 'C': -5, 'D': 4, 'E': 3, 'F': -6, 'G': 1, 'H': 1, 'I': -2, 'K': 0, 'L': -4, 'M': -3, 'N': 2, 'P': -1, 'Q': 2, 'R': -1, 'S': 0, 'T': 0, 'V': -2, 'W': -7, 'Y': -4},
    'E': {'A': 0, 'C': -5, 'D': 3, 'E': 4, 'F': -5, 'G': 0, 'H': 1, 'I': -2, 'K': 0, 'L': -3, 'M': -2, 'N': 1, 'P': -1, 'Q': 2, 'R': -1, 'S': 0, 'T': 0, 'V': -2, 'W': -7, 'Y': -4},
    'F': {'A': -3, 'C': -4, 'D': -6, 'E': -5, 'F': 9, 'G': -5, 'H': -2, 'I': 1, 'K': -5, 'L': 2, 'M': 0, 'N': -3, 'P': -5, 'Q': -5, 'R': -4, 'S': -3, 'T': -3, 'V': -1, 'W': 0, 'Y': 7},
    'G': {'A': 1, 'C': -3, 'D': 1, 'E': 0, 'F': -5, 'G': 5, 'H': -2, 'I': -3, 'K': -2, 'L': -4, 'M': -3, 'N': 0, 'P': 0, 'Q': -1, 'R': -3, 'S': 1, 'T': 0, 'V': -1, 'W': -7, 'Y': -5},
    'H': {'A': -1, 'C': -3, 'D': 1, 'E': 1, 'F': -2, 'G': -2, 'H': 6, 'I': -2, 'K': 0, 'L': -2, 'M': -2, 'N': 2, 'P': 0, 'Q': 3, 'R': 2, 'S': -1, 'T': -1, 'V': -2, 'W': -3, 'Y': 0},
    'I': {'A': -1, 'C': -2, 'D': -2, 'E': -2, 'F': 1, 'G': -3, 'H': -2, 'I': 5, 'K': -2, 'L': 2, 'M': 2, 'N': -2, 'P': -2, 'Q': -2, 'R': -2, 'S': -1, 'T': 0, 'V': 4, 'W': -5, 'Y': -1},
    'K': {'A': -1, 'C': -5, 'D': 0, 'E': 0, 'F': -5, 'G': -2, 'H': 0, 'I': -2, 'K': 5, 'L': -3, 'M': 0, 'N': 1, 'P': -1, 'Q': 1, 'R': 3, 'S': 0, 'T': 0, 'V': -2, 'W': -3, 'Y': -4},
    'L': {'A': -2, 'C': -6, 'D': -4, 'E': -3, 'F': 2, 'G': -4, 'H': -2, 'I': 2, 'K': -3, 'L': 6, 'M': 4, 'N': -3, 'P': -3, 'Q': -2, 'R': -3, 'S': -3, 'T': -2, 'V': 2, 'W': -2, 'Y': -1},
    'M': {'A': -1, 'C': -5, 'D': -3, 'E': -2, 'F': 0, 'G': -3, 'H': -2, 'I': 2, 'K': 0, 'L': 4, 'M': 6, 'N': -2, 'P': -2, 'Q': -1, 'R': 0, 'S': -2, 'T': -1, 'V': 2, 'W': -4, 'Y': -2},
    'N': {'A': 0, 'C': -4, 'D': 2, 'E': 1, 'F': -3, 'G': 0, 'H': 2, 'I': -2, 'K': 1, 'L': -3, 'M': -2, 'N': 2, 'P': 0, 'Q': 1, 'R': 0, 'S': 1, 'T': 0, 'V': -2, 'W': -4, 'Y': -2},
    'P': {'A': 1, 'C': -3, 'D': -1, 'E': -1, 'F': -5, 'G': 0, 'H': 0, 'I': -2, 'K': -1, 'L': -3, 'M': -2, 'N': 0, 'P': 6, 'Q': 0, 'R': 0, 'S': 1, 'T': 0, 'V': -1, 'W': -6, 'Y': -5},
    'Q': {'A': 0, 'C': -5, 'D': 2, 'E': 2, 'F': -5, 'G': -1, 'H': 3, 'I': -2, 'K': 1, 'L': -2, 'M': -1, 'N': 1, 'P': 0, 'Q': 4, 'R': 1, 'S': -1, 'T': -1, 'V': -2, 'W': -5, 'Y': -4},
    'R': {'A': -2, 'C': -4, 'D': -1, 'E': -1, 'F': -4, 'G': -3, 'H': 2, 'I': -2, 'K': 3, 'L': -3, 'M': 0, 'N': 0, 'P': 0, 'Q': 1, 'R': 6, 'S': 0, 'T': -1, 'V': -2, 'W': 2, 'Y': -4},
    'S': {'A': 1, 'C': 0, 'D': 0, 'E': 0, 'F': -3, 'G': 1, 'H': -1, 'I': -1, 'K': 0, 'L': -3, 'M': -2, 'N': 1, 'P': 1, 'Q': -1, 'R': 0, 'S': 2, 'T': 1, 'V': -1, 'W': -2, 'Y': -3},
    'T': {'A': 1, 'C': -2, 'D': 0, 'E': 0, 'F': -3, 'G': 0, 'H': -1, 'I': 0, 'K': 0, 'L': -2, 'M': -1, 'N': 0, 'P': 0, 'Q': -1, 'R': -1, 'S': 1, 'T': 3, 'V': 0, 'W': -5, 'Y': -3},
    'V': {'A': 0, 'C': -2, 'D': -2, 'E': -2, 'F': -1, 'G': -1, 'H': -2, 'I': 4, 'K': -2, 'L': 2, 'M': 2, 'N': -2, 'P': -1, 'Q': -2, 'R': -2, 'S': -1, 'T': 0, 'V': 4, 'W': -6, 'Y': -2},
    'W': {'A': -6, 'C': -8, 'D': -7, 'E': -7, 'F': 0, 'G': -7, 'H': -3, 'I': -5, 'K': -3, 'L': -2, 'M': -4, 'N': -4, 'P': -6, 'Q': -5, 'R': 2, 'S': -2, 'T': -5, 'V': -6, 'W': 17, 'Y': 0},
    'Y': {'A': -3, 'C': 0, 'D': -4, 'E': -4, 'F': 7, 'G': -5, 'H': 0, 'I': -1, 'K': -4, 'L': -1, 'M': -2, 'N': -2, 'P': -5, 'Q': -4, 'R': -4, 'S': -3, 'T': -3, 'V': -2, 'W': 0, 'Y': 10}
}

GAP = 5 # Gap penalty (σ)

def smith_waterman(v, w):
    n, m = len(v), len(w) # Get lengths of the two sequences
    H = [[0]*(m+1) for _ in range(n+1)] # Create scoring matrix H (filled with zeros initially)
    traceback = [[0]*(m+1) for _ in range(n+1)] # Create traceback matrix to remember where each score came from

    max_score, max_pos = 0, (0,0)  # Variables to store the maximum score and its position in the matrix

    for i in range(1, n+1): # loop over sequence v
        for j in range(1, m+1): # loop over sequence w
            s = PAM250[v[i-1]][w[j-1]]  # Get substitution score from PAM250 for v[i-1] vs w[j-1]
            diag = H[i-1][j-1] + s # diagonal: align these two residues
            up = H[i-1][j] - GAP # up: gap in w
            left = H[i][j-1] - GAP # left: gap in v
            best = max(0, diag, up, left) # Take the best option (or 0 if negative → local alignment rule)
            H[i][j] = best
            # Save where the best score came from
            if best == diag: traceback[i][j] = 1   # diagonal
            elif best == up: traceback[i][j] = 2 # up
            elif best == left: traceback[i][j] = 3 # left
            # Update max_score if we found a new highest value
            if best > max_score:
                max_score, max_pos = best, (i, j)

    # Traceback
    aligned_v, aligned_w = [], [] # aligned version of sequence v and w
    i, j = max_pos # start traceback where the score was highest

    # Follow the traceback pointers until we reach a cell with score 0
    while H[i][j] > 0:
        if traceback[i][j] == 1:
            aligned_v.append(v[i-1]); aligned_w.append(w[j-1]); i -= 1; j -= 1 # diagonal : match or mismatch
        elif traceback[i][j] == 2:
            aligned_v.append(v[i-1]); aligned_w.append('-'); i -= 1 # up : gap in w
        elif traceback[i][j] == 3:
            aligned_v.append('-'); aligned_w.append(w[j-1]); j -= 1 # left : gap in v
        else:
            break # 0 : stop (local alignment ends)
    # Reverse the sequences because traceback builds them backwards
    aligned_v = ''.join(reversed(aligned_v))
    aligned_w = ''.join(reversed(aligned_w))
    # Return the maximum alignment score and the aligned sequences
    return max_score, aligned_v, aligned_w

seq1 = "FQEITAFPRGYDEEKWPHHWYWCLTRDCFTQLGFTTIKYTALGMIQFCPVIDFIWYIIYVMRPMRGVKCSKELHWEFDDDWHQNSLDSLFHIKPMVYTCARSQEPQMQSCPFNIKNQGRDHWAFCNTNIPNYMDIYGICCAVYGETWFKHECHASAAFKDRCPQPFMNFMCKYCRNETWDFCYEEQHMLRMTMIGKFVYHTADGLKARDMCPKSIAHYFWSEDHNNMEGFPEWLQEWPHFDYVDGFSQHLKFREHRFEIFEHFCSWAFFPSGWIAIYYVYERIGAWSLLPYQWTASHTKLMYGGEADTCWFYKGAIQFDYVIKHCDLSTEMCRRFRDVIWSWRPTMYGKDHMSEIQQGLGNYQFSNDDVPNMFACSGYHYFAWAAQLLTLVMTTDTGSVSGQGRVACHNGRLEHTVRFIWHFDCSNKKREWNTWPGKVHDYWKSPTVMYACPMCKFINLKHKHRDRMALFKYFLWCGMQKHDPLQPYRKIYHIQGMTYTTYKSYKVRIWMRQNRLNEEQPKYEILYRSCQSPWMDRCQFRPGSYYAVTCPFSQNQHNCALWTGIYHLNRGRRMNSPAIVMFCCVTYLPRFMHNALDSMGWCSLQSKYWILYVPDDSQHRILKGMGKMVMFYTSKFHIGFWNNWRHWGFSQEAYVGNNEAVMFGERGYYPHVAHHNIRRPGTCYWSSEDENDPVICKEMLCQHIKQPERDQSMCHDQNSKYYSIPFVFQWNLFDWKLVWRCVHCHWDWFCRIFCRCRHVVHCLFAKVMARWSTEKEEPEQLVQPVFPGATGSYCFLGRIFYLRQEVDAAPGGGCQIQKFDMLNQQFITSRIMRLYNGMGDILFFSHWAYDCSFSLESRKLSAAHWDVAAICICNGWFNCHEGMKFSDDVVNTWDAKIKAWEPPAPRSCKEYAIKMECMNPLQYMCSMHWIQSCRRNDSTCMCIVGALQMTIMCMGIRCWRVMTTAAIECEKMNDLDLIEEKMLKCSKLPCMIKDEMYQMADWMKIEMVNSRLQPDHAYRRMGIWRLISEMKFPSIDLAEVGNYNVCDAAFPWSNQAWIIDMGVIIMNNQVSLIFVKWRYMAMGWQFQFKPCVIKYRAQEMFCNNNASHELLWPNYSRWYMCWFSLMEPWVHECCSYLMGWWLNNVIGMGAMLFCRQEVENREFAMQCKPNNEAGLCWDYFLNMKNYMCMQLINKFRCVLYRWKKMQTSAKHMEQDEEVKESRRSLPGGCSFNQMKGFQMKYPIANQHRAYDKEDSDSEAFHVMFMRNMYVVDKGMQYFLFCMDQPAKRHTMEQWIQPYFGQYNFSLQCIIIEVLYPAKFWWNMSPRQKIAWMENYMRCIYRKWLGGLICSLMVDAFMRCPQIATACIYDRFCYGITFCACSLHNPEMVYDEFTYGNYRCDTTNRGPAVMPHVCNIMEESAKKMACSVKPEWLLLYCNHVAYDTFGTIYEVDFREIQAPQPWMFVMCSWYLPDGCTDAIVMRDPNCMQWELNQDSKACYVSQKLGMRGKNKPCFSQMQVPDFMWVYNHNKYMCHAGHKGMPVSENQFCQNHMIWHMMQFHRPDEMGWNCHLLTFPIEMKWYERTSMPWDKGLFFCGKPHWFNKWGYKIFPENEWQGCYPAKNKCYHPMVLRMKGKGTRAQGPMTWDCMHQHWQCWFSRFDRQAGERSVFSSKGHIFDSQLGAYAHWWFLEEHMSFQALTLGELGRPYCYRRNQWDPWQYIWCQAQDFIMGWMSQQKTNIQMTNMNTHHSENTHVHMSMGWHIMIYDVMACRTVRQNDLGSRANDDLCLKDQAHLTDPRGYIKKHLHDEKPFYLCYPETLRCFYIDKSCRCLKESFDEYSTMDPYRFSFFQCNPENGSNIPWCVCHGIIIDIYNNLHMNGALKHMVSWIFKWVKYYQALGWFKSNTEDSMYTDDRPYTFQMPYGINQKGQIAMTCKGKIPPVEVDIQIRDVHGTCPCPTLNMGNYKFRFCMEQGYGKWHVPWAEAFGGNAFMLVGRDWMQIWRNLPDCISVNVREWTFTVAFDCTKWWKTPHCHIENNTDAEKDAPDDDAAFAIDGWAHFPWYSCNFMFTMYFHMTQPDKYTVGTQEIHYSGEWRKCGCFYVLPAPNWVVMTQTREEVWLDSTDYRVWNCCWPLFHWCWVRDESWVQWIKIGGDFRMYCIWFTTNSSVIPYKYWCFVGLFRWWTPNCKRPPTWCKYARMVPARFYSTIPFRPLRWLTTVWGMATWEINDTMHMYYRRQIQEEQQGYNWMHIIQQKFSRNSIMKDMAKHMYHIEYQGFNENGIYIHPIWTEVPNYICQYGTPANWKHPVTQWQMRRDCHPYPSWEQVSKAIFYHGNRIQIDSMGNNMSGKCLMDTKQFIIMQIKAFFTLVIRAYKPVWDIIDPSTHCWKECTICPWHNEDCEIDFMAEWYCQFPIDMPWWPSMACSNMKMLSPEQNRTWRWDCDPCNWWFCRDRNKFTPVQTAWFPRIWYTEVLGCLTWTYSLMKNITMQWTNYPCWPAVWGKMNVHGDVAMTREWKSMRWFRPTVLRLVAEPPMGNRDGQWIWVGVMDCCRMVWQQVGCQVPFYGLWQAQGHSAWTTSVAGEWSPFGSLSHMKRQMRQNCALVCTICDKMLGEPSYISLPTKYQGVDHRNMVVHYYYVYIGRPAWNLYALGCRVWQDVHPSMDAQGGNCTPWHNFTEGITIFIGPWHPFHMAYEAASHLWWYS"  
seq2 = "SFILCRARHMSEFMCGFHMFEDTKLNEHTIMAKNKYGIPCKYVFELKYFQTTTGIPQYELVMKSNTWSIWQGGMGLCCACFIKKYYRYYGQSQCVEALNIDMTGFQAWRKKTTPIAKECTIHECSAWTASHHCAFDQEQWHKYQCQHDPGENYYQFCHYNYYMPWMKMIMCLYCPDCQGSYVEDQHHLDVCCQSLTIKEMTQTEWLLASSSMPLADTYRGPSTPWEHWKNNYGCFGVDPNNSWPCMVNPHAQQWLKPLPQEHEVARFVDACIACSHRDILYSHSWMGCRINDSICRNASCSIGAFAWSHVDIPYACCCNWYHIHVVFRGYTCYKGSRVASDTVYQEEYFPYVLMPITPQRSHQEGMWCGTSWEWKTLNYMSKPIKDFMHQINIRIHDRHRDQFCMIYSEALYQLLKDDQWTYSVMGTFCVGANSVTLCYHTAELCTYQAPDVYGMKQSNPAEHYDGRNCFDWHHRTSVYLIDAVFVSQGNYYVIMQDEMEDEDFQCMDLHIHLAEFIVGNVRKMGSQTFDVWNNMRFWCMFYPKHVHLHIQTDLESGDFESVIRGIQEAYAMLYCNLTLGRGNISMHLFIMDTSTFPWYLWSPSCCNVPHFMSWPTKIDYAGTNQTLHVIQKGQQVMMNECQISSWVEPDRMEGRYPYMRYKSHDCEEDACFFHQWYKISDEPLSSTFRWMAWMWRSCWNDERFGFIKHCPDWCNGYYQSDGMALKCFTKVICKTKFLDNDQRYMQLPNNLWPTFWTGAMSLRALHLTMYQILTAGIGRHPEAPAGSWERRNISVCYMMTGIEVLAMGHIDFIFANGFSYSGPHAQTFCWPKIQAKIKGWEPPAPRSCKEYAIECMNKVLCYVQIWDLNTCSHHWIQSCRRNDSTCMCIVGALQLMMTCGGIRCFRVMTTMNIEECMTPFLFSVKCSKLPCMINDHEDAFQMYQMADWMKIEMVPMSRLQPDHAYRRMCQKKIFPSPPKNCMGSEMKIDFAEVGNYNVCIDMNNQFSLIFVKWRYMVFLMPCVIKYKSQIMFCNNKAYSRWYMCWFSLAFNEPVYRKPWVHENHGCKTMGVALMCEEFEWLNFIGMFMGHCAEARLFDHAVAPQEIHNREFACHKCKRNHVCLIWLNMKIYMCMQLIKNKFRCVLYRVKKMQYSAMQQLNKGGDTELKLVKESRRSLGYCHFNQQMKYPIANQHEDSDSEAFHIMFWVELDLCRNMWVVDQYFLFCMDQPAKWIQPGQYNFSLQCTIIEVLYMAKFWWNMSPRLKIAWMENYMAEKCKMNDCHYRYHGMNRDVSICSLMVQAFNVRPDRCPQIATACEMHYIYDRFCYRFQACSLHNPEMVNDCFTYHVSNQDPNRGPHVCNIKNVTEELCAILSWEEGQKYLEACSVKPEWLLTYCNTAHLQWAFGTHWTIPQVYEVDFREYQAPQPWEFGMIDAEPVLPDGCHIPWWMACAIVMRDPNCMACYVSQKLGMRGKNKPCFSQYQVPDIMWVYNHNKYMWHAGHKGMPVSENQFCQNQTWTDKHRHDCMLFNQGWKCEGACNDIYVAAMLTFPIEQDYKWYEPTTSMPWDAGLFRDMVFCGKPHWFNKWGYHEWQGTYPVKNKCYHPMVNQPGLRMKGKGTRAQGKMTHWQCWRFDRQAGNRSVFQIKGHIFDFQLGMYAHAWFDEECLMSHQMLAPLGEQGRHKAHHTFFNQWWPWQDRIMGWMSQQKTNDVGDCAYHIQRWPYCSMIMEKCFYDVDHEGPVGGIDLGSRANDTVCFSNTMLCLKDQDPRKYIWKRYVARCDLCYPDTPMCFYINKSCRCLKESFDEYSTMFSFFQCNIENGSNIPWCVCHGIIQCQTLKKDIYNNLHMNGALKHMVVKYALGFKSNTEDSMYTDDHKYTFQYGINQKGQIAGKCIWVAPKVQIRDVHGTCPEAMNKQQLNMGNNKFRFCMQGYAKDGRFGNFSLAREPDEFMLVESNMQAYCLISLMKTVHFHWGIAWIFTHTMTGHKMTYMWEGNHANTIFFQVSYLRWRHLMRESRWWETWFIHWPRQNREILVEHEDCWRIHVYNEQWLYNRDVTAPDFKTSGEQRSLWMLQDSYMNIENYNFLPPMENEYTAYDIDCIILYETRLFNQQNNYKYDNSTVCLQEKCYKMYIDCAYLCLRNVVQERVENINYGDMWAMHRVWNPVTNRMLQYLLLYQCEEIESDLIVIIWSHMHEKNWCLINYHAKWVCKMSDPYSIVSIETWRIEMSPFSGRMPQNWLNLGLRMPQLIAITDPCPDNGPAYPQRTYTKPIQRYKEIDDWSKWFYVTGWHKPIGNSCKLERVAWGRWLYMCQAMHVQKLVWALIPTYVTWCTLGCTDVGTCIYAYARVINTLQEFAHLVTMNGAMLAFSVWYFDDVCDEEPHSHILCEDVLKTVEAKCQMDEVSCITDGYYWSMPRFCCSFIQEQRGHNGTKSFYPRLKLCERYDPGERWEAPAKWIPSDPVVSQQKMGEGIDMINAEWPLYPDWVQFEDEQFLRGMYTSMHCEACLTQYYGPDVQVGAWPHMGNSWNFFAFCHHICMSVWPYVALARDNQHTHNCDPMPRASNFNHAVRQFHSQQKNMGHYRPGCCNVKVGYAVSCAVIASTHEQKTHHRMFAINDQNAYVCCAHSNVHKWVWMHLWQHTQGYMPGKLRTVTGRMKEMEYHIHPTDLQHFLGVYATTCDSYKDV"  

score, aln1, aln2 = smith_waterman(seq1, seq2)

print(score)     
print(aln1)                
print(aln2)
#Code provided by ChatGPT
