v = "AATGAACGATCTAACTGCATGTGGGAATTCTTCAGTAGGGAGACAAAACTCATCAATTTAGCGAGTGGAGTTATAGGGCTCAATCCATTGTCGTAAAATCGAGGATGCTTAGTTTAAGGGACAGGGCCTATTGTTACTTCACTTCGAGAGTCCCTTGTCTAGCGGTGCCTAAGTGATCTCGCTGACCGGGACTAGGACCCGTAAGGCGCAGGGCCTTCGGAGGCAGTGCTAACTGTGTGCGCGTCCCTGGGTGCCTGTACAAATGAGAGATATGAATTGTCCGGGAAGTTGCACTTTTTCAAAACCGATGGGTTCTCTACGACGTAGGGTACCACCACGCTTGGCTATCAACACTGGCGTACAGTATCTGGGAGGCAGTGATGGGTGTTTGCTGTCTTACCGGGAAACCGGATCGTTTATTCCAAAGAGTCTCGCTTTCTCACGTCACGCGTACGACAGCCTGATAGACCGGACGTCCCGCACAGAATTTACGAGGTGGATAAGTTTTTCGCTAAAGTACCGTGGGAAGCCTCCGCTCGGGCAAAACCAGAATCTACATGGATCTTTCGCAAGGGCTAATTCTGGGGATTCTTAATCTGCTGAATTTAAATCGTCTGAGAGCTATCTCACGGTACCTCGCAAATCGCTCTCGGTCATGATCATATGAACCGAGATAAGGTTCGTTGAAGGGCTAACCGCTTTTCGGATGCGCGTAGTCGCCCTGTGTTTACAGATCATTAGAGGATGGGTGAGCAGACTGGCATTGCCAAGGCTCAGGCGTGCGACATTAGCGGTCAGTTTGCTACAGATCTGACGACTTGCTAGAACAGGCTTGCTAGTGGCAGGTTTCCGAAGTCGACCTGGCAGATTATCCATTACTGAGTTACCACACATAGGCGGGTGTTGATGACCGATTCTGCTTGGCAGGCGATGACATCACCTGCCAAA"
w = "TCCGCTCCGCCTCCCTCCGGTTGGAAGGATGGATGTCGAATACCTGTCACCTTTCTTAAATGTCAGGCGTCGAGAACGTTACACGTATGTTCCCTTTCCTGACGGCACCGAATCTGAGTACATGTTTCGCTTCAGCTACACGGTCATGCAGTAAAAGACGACGGTCTGCTCAATGGGACAAGACTAGCCAGTGGTCCAACACGCTCTCAGGCGGATTAAGGAATGAACAAGTTACGGGCGCATAGAGCGAGAAGCGCGCCTATTCGCAGCAGTTGCATCGGCTACGGGGCGCACTAAGAGAATGTGACTGAGCCTACAGAAAAACTTTAACTCGACTCCCGTCTCGTTCGGAGCTCACCCACGTCGGGCGACTAGACTGGTTGATCCTACCAGTTTAACCCACGGAAAGCACCGGTAGAACCGGCTTTCTTTACATACGGAATCTTCCGGATCAACAAGACAGCTGTTAGGCTTTCCTATGATGAGTACTCAAGTATCTTGTACTACATAGGCACTGACTCTTCTGCCTTAGCCTACCTGGCCGAAGAGCCCGGATTGGTCAGATCCCCCAACGGTACACAGAACTCCACTGTAGAGGTACAGCCTACGAATATGAACCAGTCCTGAACGCGCCCGCCTGTCCTCTAAAGCGGACGCCTCATGCACGAGGGAATATGGAGCTCTGGTTCCCTCGTGAAGCAATTATTGTACCCGATTTCTCCCGCCTGTTCGGTAAATCTACGACTTAGGTATCTCGTTGGAATCCACAACAAATGTATTCGTCTGGTCCACGGTACCACAGTAATGGCGGCTAAGCATGGTGGCGTTGACTGCGTATATAGCCGAGACAATCCTGCTGCGGGTCCAACGGGTAGAGTTTCGGCCCTCTAAACCGAATACGTGGATTGGATCTATCCAACATCTGAACACCCAATGAGATCTTCTTTTTTGTCCAGATCCGTTATGCAGCTAGCCGCAGTA"

def lcs(v, w):
    n = len(v)
    m = len(w)

    s = [[0] * (m+1) for _ in range(n+1)]  # Create DP table: (n+1) x (m+1), initialized with zeros

    # Fill the table:
    for i in range(1, n+1): # Loop over each character in v
        for j in range(1, m+1): # Loop over each character in w
            if v[i-1] == w[j-1]:          # Characters match
                s[i][j] = s[i-1][j-1] + 1 # Add 1 to diagonal cell value
            else:                          # Characters don't match
                s[i][j] = max(s[i-1][j], s[i][j-1]) # take max of left or top cell

    # Backtrack to reconstruct the LCS string
    i, j = n, m # Start at bottom-right corner of DP matrix
    lcs_str = [] # Initialize list to store LCS characters

    while i > 0 and j > 0: # Continue until we reach the top or left edge
        if v[i-1] == w[j-1]:
            lcs_str.append(v[i-1])      # Add matching character
            i -= 1
            j -= 1 # Move diagonally up-left
        elif s[i-1][j] > s[i][j-1]: # If top cell has larger or equal value
            i -= 1                       # Move up
        else:
            j -= 1                       # Move left

    # Reverse because we built it backwards
    return ''.join(reversed(lcs_str))


result = lcs(v, w)
print(result)